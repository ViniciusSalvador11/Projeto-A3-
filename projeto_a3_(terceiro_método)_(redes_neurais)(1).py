# -*- coding: utf-8 -*-
"""Projeto A3 (Terceiro MÃ©todo) (Redes Neurais)(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zy2HEXsfz_L1DtFC40M5kiu0M3C7jurl
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('winequality-red.csv')

x = df.drop('quality', axis=1)
y = df['quality']

trainX, testX, trainY, testY = train_test_split(x, y, test_size = 0.3)

sc=StandardScaler()

scaler = sc.fit(trainX)
trainX_scaled = scaler.transform(trainX)
testX_scaled = scaler.transform(testX)

mlp_reg = MLPRegressor(hidden_layer_sizes=(150,100,50),
                       max_iter = 100,activation = 'relu', solver = 'adam')
mlp_reg.fit(trainX_scaled, trainY)
y_pred = mlp_reg.predict(testX_scaled)

df_temp = pd.DataFrame({'Realidade': testY, 'Previsto': y_pred})
df_temp.head()

df_temp = df_temp.head(30)
df_temp.plot(kind='bar',figsize=(10,6))
plt.grid(which='major', linestyle='-', linewidth='0.5', color='gray')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
plt.show()

from sklearn import metrics

print('Mean Absolute Error:', metrics.mean_absolute_error(testY, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(testY, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(testY, y_pred)))